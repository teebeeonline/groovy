/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package dsld

contribute(bind(closure: enclosingClosure()) & bind(method: enclosingMethod(annotatedBy('groovy.contracts.Ensures')))) {
	property name : 'old', doc: 'java.util.Map of all property values before the method call.', provider: 'groovy-contracts', type : java.util.Map

	if (method.isEmpty()) return

    methodNode.parameters.each  {
		property name : it.name, provider: 'groovy-contracts', type : it.type
	}

	def methodNode = method.first()
	def returnType = methodNode.returnType
	if (returnType.name == 'void') return

	property name : 'result', doc: 'The return value of this method.', provider: 'groovy-contracts', type : returnType
}

contribute(bind(closure: enclosingClosure()) & bind(method: enclosingMethod(annotatedBy('groovy.contracts.Requires')))) {
	if (method.isEmpty()) return

	def methodNode = method.first()
	methodNode.parameters.each {
		property name : it.name, provider: 'groovy-contracts', type : it.type
	}
}

contribute(bind(closure: enclosingClosure()) & bind(clazz: enclosingClass(annotatedBy('groovy.contracts.Invariant')))) {
	if (clazz.isEmpty()) return

	def classNode = clazz.first()
	classNode.properties.each  {
		property name : it.name, provider: 'groovy-contracts', type : it.type
	}
}