/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiMethod
import com.intellij.psi.PsiType

PsiMethod findParentMethod(PsiElement start)  {
    def psiElement = start
    while (!(psiElement instanceof PsiMethod) && psiElement != null) psiElement = psiElement.parent
    psiElement
}

contributor(scope: closureScope(annotationName: 'groovy.contracts.Ensures'))  {
    variable(name: 'old', type: 'Map')

    PsiMethod method = findParentMethod(place)
    if (method == null) return

    // if we have a void return type then we're done
    if (method.returnType == PsiType.VOID) return

    def type = method.returnType.canonicalText
    if (type) variable(name: 'result', type: type)
}